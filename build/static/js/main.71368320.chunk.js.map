{"version":3,"sources":["About/About.js","serviceWorker.js","index.js"],"names":["WrapperStyle","styled","div","_templateObject","CardStyle","Card","_templateObject2","useStyles","makeStyles","card","maxWidth","Boolean","window","location","hostname","match","ReactDOM","render","react_default","a","createElement","classes","className","CardActionArea","CardMedia","component","alt","height","image","title","CardContent","Typography","gutterBottom","variant","color","role","aria-label","CardActions","Button","size","href","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"6hBAWA,IAAMA,EAAeC,IAAOC,IAAVC,KAMZC,EAAYH,YAAOI,IAAPJ,CAAHK,KAKTC,EAAYC,YAAW,CACzBC,KAAM,CACJC,SAAU,OCZIC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOC,EAAAC,EAAAC,cFwBD,WACX,IAAMC,EAAUd,IAEhB,OACEW,EAAAC,EAAAC,cAACpB,EAAD,KACEkB,EAAAC,EAAAC,cAAChB,EAAD,CAAWkB,UAAWD,EAAQZ,MAC5BS,EAAAC,EAAAC,cAACG,EAAA,EAAD,KACEL,EAAAC,EAAAC,cAACI,EAAA,EAAD,CACEC,UAAU,MACVC,IAAI,wBACJC,OAAO,MACPC,MAAM,8DACNC,MAAM,0BAERX,EAAAC,EAAAC,cAACU,EAAA,EAAD,KACEZ,EAAAC,EAAAC,cAACW,EAAA,EAAD,CAAYC,cAAY,EAACC,QAAQ,KAAKR,UAAU,MAAhD,WAGAP,EAAAC,EAAAC,cAACW,EAAA,EAAD,CAAYE,QAAQ,QAAQC,MAAM,gBAAgBT,UAAU,KAC1DP,EAAAC,EAAAC,cAAA,uCAA8BF,EAAAC,EAAAC,cAAA,QAAMe,KAAK,MAAMC,aAAW,oBAA5B,mCAA9B,YAAmGlB,EAAAC,EAAAC,cAAA,QAAMe,KAAK,MAAMC,aAAa,uBAA9B,iBAAnG,aAINlB,EAAAC,EAAAC,cAACiB,EAAA,EAAD,KACEnB,EAAAC,EAAAC,cAACkB,EAAA,EAAD,CAAQC,KAAK,QAAQC,KAAK,2BAA2BN,MAAM,WAA3D,eAGAhB,EAAAC,EAAAC,cAACkB,EAAA,EAAD,CAAQC,KAAK,QAAQC,KAAK,6BAA6BN,MAAM,WAA7D,UEnDI,MAAWO,SAASC,eAAe,SD2H7C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.71368320.chunk.js","sourcesContent":["import React from 'react';\nimport styled from 'styled-components';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Card from '@material-ui/core/Card';\nimport CardActionArea from '@material-ui/core/CardActionArea';\nimport CardActions from '@material-ui/core/CardActions';\nimport CardContent from '@material-ui/core/CardContent';\nimport CardMedia from '@material-ui/core/CardMedia';\nimport Button from '@material-ui/core/Button';\nimport Typography from '@material-ui/core/Typography';\n\nconst WrapperStyle = styled.div`\n    display: flex;\n    align-items: center;\n    justify-content: center;\n`;\n\nconst CardStyle = styled(Card)`\n    margin-top: 10%;\n    height: 31.25rem;\n`;\n\nconst useStyles = makeStyles({\n    card: {\n      maxWidth: 400,\n    },\n});\n\n// const classes = styles123();\n\nexport default function About() {\n    const classes = useStyles();\n  \n    return (\n      <WrapperStyle>  \n        <CardStyle className={classes.card}>\n          <CardActionArea>\n            <CardMedia\n              component=\"img\"\n              alt=\"Contemplative Reptile\"\n              height=\"320\"\n              image=\"https://avatars1.githubusercontent.com/u/46031112?s=460&v=4\"\n              title=\"Contemplative Reptile\"\n            />\n            <CardContent>\n              <Typography gutterBottom variant=\"h5\" component=\"h2\">\n                Ming995\n              </Typography>\n              <Typography variant=\"body2\" color=\"textSecondary\" component=\"p\">\n                <span>Member of HelloGitHub / <span role=\"img\" aria-label=\"man_technologist\">üë®‚Äçüíª </span> coder / <span role=\"img\" aria-label = \"shallow_pan_of_food\">ü•ò </span> like </span>\n              </Typography>\n            </CardContent>\n          </CardActionArea>\n          <CardActions>\n            <Button size=\"small\" href=\"https://hellogithub.com/\" color=\"primary\">\n              HelloGitHub\n            </Button>\n            <Button size=\"small\" href=\"https://github.com/ming995\" color=\"primary\">\n              ME\n            </Button>\n          </CardActions>\n        </CardStyle>\n      </WrapperStyle>\n    );\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport About from './About/About';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<About />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}